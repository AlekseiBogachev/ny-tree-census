---
title: 'Исследовательский анализ датасета [2015 Street Tree Census - Tree Data](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/uvpi-gqnh/about_data)'
author: Aleksei Bogachev
date: 'June 16, 2024'
---



## Краткое описание

Датасет содержит информацию о деревьях, растущих на улицах Нью-Йорка, собранную
в рамках проекта **2015 Street Tree Census** волонтёрами и сотрудниками
**NYC Parks & Recreation** и партнёрских организаций.

Собранные данные включают в себя информацию о видах деревьев, диаметре и оценку
здоровья. Доступны сопроводительные данные, показывающие статус сбора и
публикации данных по всему городу.

[Подробнее о датасете можно узнать на его сайте.](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/uvpi-gqnh/about_data)

Данный отчёт содержит исследовательский анализ данных, в том числе следующие
пункты:
- **превью данных** - таблица с небольшой выборкой из датасета,
- **оценка количества пропусков в столбцах** с помощью библиотеки
  [`missingno`](https://github.com/ResidentMario/missingno),
- **диаграммы попарного распределения признаков**,
- **матрицу попарной корреляции между вещественными признаками**,
- **карту расположения деревьев** из датасета.

## Описание данных

В следующей таблице приведено переведённое описание данных.
Подробную информацию можно получить на
[сайте датасета](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/uvpi-gqnh/about_data).

| № | Название столбца | Описание | Тип данных |
|---|---|---|---|
| 1 | tree_id | Уникальный идентификатор каждого дерева. | Число |
| 2 | block_id | Идентификатор, связывающий каждое дерево с блоком в таблице блоков/шейп-файле, в который оно отображается. ("Identifier linking each tree to the block in the blockface table/shapefile that it is mapped on.") | Число |
| 3 | created_at | Дата и вермя создания записи. | Дата и время (datetime) |
| 4 | tree_dbh | Диаметр дерева, измеренный приблизительно в 137 см (54") над землёй. Данные собраны как для мёртвых, так и для живых деревьев. Для пеньков используется признак stump_diam | Число |
| 5 | stump_diam | Диаметр пенька, измеренный через центр, округлённый до ближайшего целого. Диаметр измерен в дюймах. | Число |
| 6 | curb_loc | Расположение грядки (клумбы, газона), в которой находится дерево, относительно бордюра; деревья располагаются либо вдоль бордюра (OnCurb), либо со смещением от бордюра (OffsetFromCurb). | Текст |
| 7 | status | Статус, указывающий является ли дерево живым, стоящим мёртвым или пеньком. | Текст |
| 8 | health | Оценка здоровья дерева пользователем. | Текст |
| 9 | spc_latin | Название вида на латыни, например "Acer rubrum". | Текст |
| 10 | spc_common | Обывательское название вида, например "red maple". | Текст |
| 11 | steward | Indicates the number of unique signs of stewardship observed for this tree. Not recorded for stumps or dead trees. | Текст |
| 12 | guards | Указывает, присутствует ли ограждение (охрана?) и считает ли пользователь ее полезной или вредной. Для сухостойных деревьев и пней не отмечено. | Текст |
| 13 | sidewalk | Указывает, был ли один из краёв тротуара, непосредственно прилегающий к дереву, поврежден, треснут или поднят. Для сухостойных деревьев и пней не отмечено. | Текст |
| 14 | user_type | Поле содержит категорию пользователя, внёсшего запись в данные. | Текст |
| 15 | problems |  | Текст |
| 16 | root_stone | Указывает на наличие проблемы с корнями, вызванной брусчаткой на клумбе дерева. | Текст |
| 17 | root_grate | Указывает на наличие проблемы с корнями, вызванной металлическими решетками на клумбе дерева | Текст |
| 18 | root_other | Указывает на наличие других проблем с корнями. | Текст |
| 19 | trunk_wire | Указывает на наличие проблемы со стволом дерева, вызванной проволокой или веревкой, обернутой вокруг ствола. | Текст |
| 20 | trnk_light | Указывает на наличие проблемы со стволом, вызванной освещением, установленным на дереве. | Текст |
| 21 | trnk_other | Указывает на другие проблемы со стволом. | Текст |
| 22 | brch_light | Указывает на наличие проблемы с ветвями, вызванной освещением (обычно гирляндами) или проводами в ветвях. | Текст |
| 23 | brch_shoe | Указывает на наличие проблемы с ветками, вызванной кроссовками в ветках. | Текст |
| 24 | brch_other | Указывает на наличие других проблем с ветвями дерева. | Текст |
| 25 | address | Ближайший предполагаемый адрес к дереву. | Текст |
| 26 | postcode | Почтовый индекс. | Число |
| 27 | zip_city | Город, полученный из почтового индекса. Часто (но не всегда) это то же самое, что и район. | Текст |
| 28 | cb_num | Community board in which tree point is located. | Число |
| 29 | borocode | Код района, в котором расположено дерево: 1 (Манхэттен), 2 (Бронкс), 3 (Бруклин), 4 (Куинс), 5 (Стейтен-Айленд). | Число |
| 30 | boroname | Название района, в котором расположено дерево. | Текст |
| 31 | cncldist | Муниципальный округ, в котором находится дерево | Число |
| 32 | st_assem | Район Государственного собрания, в котором находится дерево. (State Assembly District in which tree point is located.) | Число |
| 33 | st_senate | Район Сената штата, в котором находится дерево. (State Senate District in which tree point is located.) | Число |
| 34 | nta | Код NTA, соответствующий районов по данным переписи населения США 2010 года, в который попадает дерево. (This is the NTA Code corresponding to the neighborhood tabulation area from the 2010 US Census that the tree point falls into.) | Текст |
| 35 | nta_name | Название NTA, соответствующее району по данным переписи населения США 2010 года, в который попадает дерево. (This is the NTA name corresponding to the neighborhood tabulation area from the 2010 US Census that the tree point falls into.) | Текст |
| 36 | boro_ct | Это идентификатор участка переписи, в который попадает дерево. | Число |
| 37 | state | Все строки меют одно и то же значение этого признака, равное "New York". | Текст |
| 38 | latitude | Широта | Число |
| 39 | longitude | Долгота | Число |
| 40 | x_sp | Координата X в Государственной плоской системе координат (SPCS), используемой в США. Единица измерения футы. (X coordinate, in state plane. Units are feet.) | Число |
| 41 | y_sp | Координата Y в Государственной плоской системе координат (SPCS), используемой в США. Единица измерения футы. (Y coordinate, in state plane. Units are feet.) | Число |
| 42 | council_district | Муниципальный округ. | Число |
| 43 | census_tract | Переписной участок | Число |
| 44 | bin |  | Число |
| 45 | bbl |  | Число |

## Загрузка данных
Загрузка данных и их описания выполняется, если данные и описание не были
загружены ранее.

Данные загружаются с помощью
[SODA API](https://dev.socrata.com/foundry/data.cityofnewyork.us/uvpi-gqnh).

```{python}
%%bash
if [ ! -f ../../references/ny_tree_census_description.ptrees_problems ]; then
    echo "Загрузка описания датасета."
    poetry run python ../../src/data/get_data.py get-description
    echo "Загрузка завершена. Подробнее в ../../logs/src.logs.logs.log"
else
    echo "Описание датасета было загружено ранее."
fi
```

```{python}
%%bash
if [ ! -f /dockeruser/ny_tree_census/data/raw/data.csv ]; then
    echo "Загрузка датасета."
    poetry run python ../../src/data/get_data.py get-data
    echo "Загрузка завершена. Подробнее в ../../logs/src.logs.logs.log"
else
    echo "Датасет был загружен ранее."
fi
```

## Анализ данных

### Импорт модулей

```{python}
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from plotly import express as px

from src.visualization import (
    explore_cat_feature,
    explore_cat_vs_cat,
    explore_num_feature,
    plot_corr_matrix,
    review_data,
)

%matplotlib inline
```

### Знакомство с данными

#### Вывод общей информации о датафрейме

Считаем загруженный ранее файл с датасетом и выведем общую информацию о нем.

```{python}
dataset: pd.DataFrame = pd.read_csv("/dockeruser/ny_tree_census/data/raw/data.csv")

review_data(dataset)
```

#### Выводы

Датасет не содержит дубликатов, но содержит пропуски. Пропуски не должны быть
проблемой на этапе исследовательского анализа, однако их придётся обработать,
прежде чем передать данные модели машинного обучения, если это будет необходимо.

Пропуски содержатся в следующих столбцах:
- `health` - 5%;
- `spc_latin` - 5%;
- `spc_common` - 5%;
- `steward` - 5%;
- `guards` - 5%;
- `sidewalk` - 5%;
- `problems` - 5%;
- `council_district` - 1%;
- `census_tract` - 1%;
- `bin` - 1%;
- `bbl` - 1%;

Признаки `tree_id`, `block_id`, `created_at` содержат уникальный идентификатор
дерева, уникальный идентификатор блока и дату создания записи. **Не будем их
рассматривать, по крайней мере, по началу.**

**Не имеет смысла исследовать признак `state`**, так как данный столбце
целиком заполенен значением "New York".

Датасет содержит как категориальные, так и количественные признаки. 

К количественным признакам относятся следующие:
- `tree_dbh`;  
- `stump_diam`;  
- `latitude`;
- `longitude`;
- `x_sp`;
- `y_sp`;
- `bin`;
- `bbl`.

Cледующие признаки, хоть и были прочитаны с типом `int64`, с точки зрения своего
физического смысла, являют категориальными:
- `zipcode`;  
- `cb_num`;  
- `borocode`; 
- `cncldist`;  
- `st_assem`;  
- `st_senate`; 
- `boro_ct`;
- `council_district`;
- `census_tract`.

К категориальным признакам также относятся признаки
- `curb_loc`; 
- `status`; 
- `health`; 
- `spc_latin`; 
- `spc_common`; 
- `steward`; 
- `guards`; 
- `sidewalk`; 
- `user_type`; 
- `problems`; 
- `root_stone`; 
- `root_grate`; 
- `root_other`; 
- `trunk_wire`; 
- `trnk_light`; 
- `trnk_other`; 
- `brch_light`; 
- `brch_shoe`; 
- `brch_other`; 
- `address`;
- `zip_city`;
- `boroname`;
- `nta`; 
- `nta_name`;
- `state`.

Многие категориальные признаки имеют высокую кардинальность.

Подсчитаем количество уникальных значений для категориальных признаков, которые
изначально были распознаны как количественные.

```{python}
columns = [
    "zipcode",
    "cb_num",
    "borocode",
    "cncldist",
    "st_assem",
    "st_senate",
    "boro_ct",
    "council_district",
    "census_tract",
]

pd.DataFrame(
    dataset[columns].nunique(), columns=["Количество уникальных значений"]
)
```

Таким образом, среди категориальных признаков мы можем исследовать с помощью
графиков следующие:
- `curb_loc`;
- `status`;
- `health`;
- `steward`;
- `guards`;
- `sidewalk`;
- `user_type`;
- `root_stone`;
- `root_grate`;
- `root_other`;
- `trunk_wire`;
- `trnk_light`;
- `trnk_other`;
- `brch_light`;
- `brch_shoe`;
- `brch_other`;
- `zip_city`;
- `boroname`;
- `cb_num`;
- `borocode`;
- `cncldist`;
- `st_senate`;
- `council_district`.

### Исследование отдельных признаков

#### Количественные признаки
К количественным признакам отнесём следующие:
- `tree_dbh`;  
- `stump_diam`;  
- `latitude`;
- `longitude`;
- `x_sp`;
- `y_sp`;
- `bin`;
- `bbl`.

Рассмотрим их распределения.

##### `tree_dbh`
Признак содержит диаметр дерева в, измеренный приблизительно в 137 см (54") над
землёй.

```{python}
explore_num_feature(
    data=dataset,
    column_name="tree_dbh",
    bins=51,
)
```

Форма распределения значений признака значительно отклоняется от формы
нормального. Распределение имеет тяжёлый хвост и большое количество выбросов
в большую сторону.

Признак может быть строго равен нулю. Скорее всего, значение данного признака
равно нулю для пеньков. Согласно описанию данных диаметр пеньков заносится в
признак `stump_diam`.

Рассмотрим распределение значений данного признак в диапазоне
`0 < tree_dbh <= 100` более подробно.

```{python}
explore_num_feature(
    data=dataset.query("tree_dbh > 0 and tree_dbh <=100"),
    column_name="tree_dbh",
    bins=51,
)
```

##### `stump_diam`
Диаметр пенька, измеренный через центр, в дюймах.

```{python}
explore_num_feature(
    data=dataset,
    column_name="stump_diam",
)
```

В датасете большинство наблюдений относится к деревьям, а не к пенькам, поэтому
данный признак содержит абсолютное большинство нулей. Диаметр стволов деревьев
заносится в признак `tree_dbh`.

Выберем только те записи, где диаметр пенька строго больше нуля и меньше или
равен 100 и рассмотрим распределение диаметров повторно.

```{python}
explore_num_feature(
    data=dataset.query("stump_diam > 0 and stump_diam <= 100"),
    column_name="stump_diam",
    bins=51,
)
```

Форма распределения значений признака значительно отклоняется от формы
нормального. Распределение имеет тяжёлый хвост и большое количество выбросов
в большую сторону.

Форма распределения значений диаметров пеньков напоминает форму распределения
значений диаметров стволов `tree_dbh`, что закономерно.

**Таким образом, признаки `tree_dbh` и `stump_diam` стоить попробовать
объединить в один признак `diam` и рассматривать совместно.**

##### `latitude`
Широта точки в которой расположено дерево на карте.

```{python}
explore_num_feature(
    data=dataset,
    column_name="latitude",
)
```

Форма распределения близка к форме нормального распределения, но имеет несколько
мод, которые могут соответствовать центрам "кластеров" деревьев.

Позже мы рассмотрим распределение точек одновременно по признаку `latitude` и
признаку `longitude`, а также нанесём точки с деревьями на карту, что позволит
понять причину появления нескольких мод.

##### `longitude`
Долгота точки в которой расположено дерево на карте.

```{python}
explore_num_feature(
    data=dataset,
    column_name="longitude",
)
```

Форма распределения значительно отличается от формы нормального распределения.
Распределение имеет как минимум две моды.

Позже мы рассмотрим распределение записей одновременно по признаку `latitude` и
признаку `longitude`, а также нанесём точки с деревьями на карту, что позволит
понять причину появления нескольких мод.

##### `x_sp`
Координата X в Государственной плоской системе координат (SPCS),
используемой в США. Единица измерения футы.

```{python}
explore_num_feature(data=dataset, column_name="x_sp")
```

Распределение повторяет распределение признака `longitude`.

##### `y_sp`
Координата Y в Государственной плоской системе координат (SPCS),
используемой в США. Единица измерения футы.

```{python}
explore_num_feature(data=dataset, column_name="y_sp")
```

Распределение повторяет распределение признака `latitude`.

##### `bin` и `bbl`
В описании датасета отсутствуют комментарии для этих признаков, но они были
распознаны как количественные.

Рассмотрим их распределения.

```{python}
explore_num_feature(data=dataset, column_name="bin")

explore_num_feature(data=dataset, column_name="bbl")
```

Судя по гистограммам, признаки являются категориальными, подсчитаем количество
уникальных значений для каждого из них.

```{python}
pd.DataFrame(
    dataset[["bin", "bbl"]].nunique(),
    columns=["Количество уникальных значений"],
)
```

Выведем несколько значений этих признаков.

```{python}
dataset[["bin", "bbl"]].sample(10)
```

Похоже, что данные признаки содержат какие-то коды или координаты с большим
количеством уникальных значений.

##### `created_at`
Рассмотрим признак `created_at`, содержащий дату и время создания записи.
Подсчитаем количество записей созданных в 

```{python}
(
    dataset.assign(created_at=lambda row: pd.to_datetime(row.created_at))
    .loc[:, ["created_at", "tree_id"]]
    .resample("MS", on="created_at")
    .count()
    .rename(columns={"tree_id": "count"})
    .reset_index()
    .assign(created_at=lambda row: row.created_at.dt.date)
    .plot(
        kind="bar",
        x="created_at",
        y="count",
        title="Количество записей внесённых в разное время",
    )
)

plt.show()
```

Больше всего записей было внесено в октябре 2015, самая низкая активность
участников проекта наблюдалась в период с января 2016 по апрель 2016.

#### Категориальные признаки
Среди категориальных признаков мы можем исследовать с помощью
графиков следующие:
- `curb_loc`;
- `status`;
- `health`;
- `steward`;
- `guards`;
- `sidewalk`;
- `user_type`;
- `root_stone`;
- `root_grate`;
- `root_other`;
- `trunk_wire`;
- `trnk_light`;
- `trnk_other`;
- `brch_light`;
- `brch_shoe`;
- `brch_other`;
- `zip_city`;
- `boroname`;
- `cb_num`;
- `borocode`;
- `cncldist`;
- `st_senate`;
- `council_district`.

##### `curb_loc`
Рассмотрим категориальный признак `curb_loc`, содержащий информацию о
расположении грядки (клумбы, газона), в которой находится дерево, относительно
бордюра; деревья располагаются либо вдоль бордюра (OnCurb), либо со смещением
от бордюра (OffsetFromCurb).

```{python}
explore_cat_feature(
    data=dataset,
    column_name="curb_loc",
    title="Расположение клумбы относительно бордюра",
    xlabel="Количество наблюдений",
    ylabel="Расположение клумбы",
)
```

Большинство деревьев (клумб) расположены вдоль бордюра.

##### `status`
Рассмотрим категориальный признак `status` - статус, указывающий является ли
дерево живым, стоящим мёртвым или пеньком.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="status",
    title="Статус дерева\n(живое / мёртвое / пенёк)",
    xlabel="Количество наблюдений",
    ylabel="Статус",
)
```

В датасете очень мало пеньков и мёртвых деревьев.

##### `health`
Рассмотрим категориальный признак `health`, содержащий оценку здоровья дерева
пользователем.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="health",
    title="Оценка здоровья дерева",
    xlabel="Количество наблюдений",
    ylabel="Оценка",
)
```

Состояние большинства деревьев оценено как хорошее, при этом признак, содержит
некоторое количество пропусков. Вполне возможно, что эти пропуски соответствуют
пенькам и мёртвым деревьям. Чтобы проверить эти гипотезу подсчитаем для каждого
статуса дерева количество каждого значения признака `health`.

```{python}
dataset.groupby("status")["health"].value_counts(dropna=False)
```

Для живых деревьев признак `health` содержит пропущенное значение только в
одном случае, все остальные пропуски соответствуют пням и мёртвым деревьям.

##### `steward`
Рассмотрим категориальный признак `steward`. Согласно описанию, содержит
пропущенные значения для пней и мёртвых деревьев.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="steward",
    title="Steward",
    xlabel="Количество наблюдений",
)
```

Признак можно рассматривать как ранговый и перекодировать целыми числами.

##### `guards`
Рассмотрим категориальный признак `guards`, содержащий информацию об ограждении
вокруг дерева. Согласно описанию, признак содержит пропущенные значения для пней
и мёртвых деревьев.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="guards",
    title="Ограждения",
    xlabel="Количество наблюдений",
)
```

У большинства деревьев ограждения отсутствуют.

##### `sidewalk`
Рассмотрим категориальный признак `sidewalk`, который указывает, был ли один из
краёв тротуара, непосредственно прилегающий к дереву, поврежден, треснут или
поднят. Согласно описанию, признак содержит пропущенные значения для пней
и мёртвых деревьев.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="sidewalk",
    title="sidewalk\n(состояние края тротуара)",
    xlabel="Количество наблюдений",
    ylabel="sidewalk",
)
```

##### `user_type`
Рассмотрим категориальный признак `user_type`, который содержит категорию
пользователя, внёсшего запись в данные.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="user_type",
    title="Категории пользователей,\nвнёсших данные",
    xlabel="Количество наблюдений",
    ylabel="Категория пользователя",
)
```

Примечательно, что существенная часть данных добавлена волотнёрами.

##### `root_stone`
Рассмотрим категориальный признак `root_stone`, который указывает на наличие
проблемы с корнями, вызванной брусчаткой на клумбе дерева.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="root_stone",
    title="Проблемы с корнями\nиз-за брусчатки на клумбе",
    xlabel="Количество наблюдений",
    ylabel="Наличие проблемы",
)
```

У большинства деревьев нет проблем с брусчаткой. Видимо, признак также указан и
для пней и для мёртвых деревьев.

##### `root_grate`
Рассмотрим категориальный признак `root_grate`, который указывает на наличие
проблемы с корнями, вызванной металлическими решетками на клумбе дерева.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="root_grate",
    title="Проблемы с корнями\nиз-за решёток на клумбе",
    xlabel="Количество наблюдений",
    ylabel="Наличие проблемы",
)
```

Проблемы, вызванные решётками встречаются очень редко. Похоже, признак также
указан для пней и мёртвых деревьев.

##### `root_other`
Рассмотрим категориальный признак `root_other`, Который указывает на наличие
других проблем с корнями.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="root_other",
    title="Другие проблемы с корнями",
    xlabel="Количество наблюдений",
    ylabel="Наличие проблемы",
)
```

У большинства деревьев нет проблем данной категории. Видимо, признак также
указан и для пней и для мёртвых деревьев.

##### `trunk_wire`
Рассмотрим категориальный признак `trunk_wire`, который указывает на наличие
проблем со стволом дерева, вызванной проволокой или веревкой, обернутой вокруг
ствола.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="trunk_wire",
    title="Проблемы со стволом\nиз-за проволоки или верёвки",
    xlabel="Количество наблюдений",
    ylabel="Наличие проблемы",
)
```

Проблема встречается крайне редко. Похоже, признак также указан для пней и
мёртвых деревьев.

##### `trnk_light`
Рассмотрим категориальный признак `trnk_light`, который указывает на наличие
проблем со стволом дерева, вызванной освещением, установленным на дереве.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="trnk_light",
    title="Проблемы со стволом\nиз-за освещения",
    xlabel="Количество наблюдений",
    ylabel="Наличие проблемы",
)
```

Проблема встречается настолько редко, что информативность данного признака
ставится под вопрос.

##### `trnk_other`
Рассмотрим категориальный признак `trnk_other`, который указывает на наличие
других проблем со стволом дерева.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="trnk_other",
    title="Другие проблемы со стволом",
    xlabel="Количество наблюдений",
    ylabel="Наличие проблемы",
)
```

Проблема встречается довольно редко и указана в том числе для пней и мёртвых
деревьев.

##### `brch_light`
Рассмотрим категориальный признак `brch_light`, который указывает на наличие
проблемы с ветвями, вызванной освещением (обычно гирляндами) или проводами в
ветвях.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="brch_light",
    title="Проблемы с ветвями из-за освещения",
    xlabel="Количество наблюдений",
    ylabel="Наличие проблемы",
)
```

Проблема встречается довольно редко и указана в том числе для пней и мёртвых
деревьев.

##### `brch_shoe`
Рассмотрим категориальный признак `brch_shoe`, который указывает на наличие
проблемы с ветвями из-за кросовок в них.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="brch_shoe",
    title="Проблемы с ветвями из-за кросовок",
    xlabel="Количество наблюдений",
    ylabel="Наличие проблемы",
)
```

Проблема встречается настолько редко, что информативность признака ставится
под вопрос. Признак не содержит пропусков, а значит указан в том числе и для
пней и для мёртвых деревьев.

##### `brch_other`
Рассмотрим категориальный признак `brch_other`, который указывает на наличие
других проблем с ветвями.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="brch_other",
    title="Другие проблемы с ветвями",
    xlabel="Количество наблюдений",
    ylabel="Наличие проблемы",
)
```

Проблемы встречаются довольно редко, признак указан в том числе для пней и
мёртвых деревьев.

##### `zip_city`
Рассмотрим категориальный признак `zip_city`, который содержит город, полученный
из почтового индекса.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="zip_city",
    title="Город, полученный из почтового индекса.",
    xlabel="Количество наблюдений",
    ylabel="Город",
    figsize=(7, 10),
)
```

Большинство записей соответствуют Бруклину.

##### `boroname`
Рассмотрим категориальный признак `boroname`, который указывает название района,
в котором расположено дерево.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="boroname",
    title="Название района",
    xlabel="Количество наблюдений",
    ylabel="Название района",
)
```

Большинство деревьев раcположены в районе **Queens**.

##### `cb_num`
Рассмотрим категориальный признак `cb_num`.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="cb_num",
    title="cb_num",
    xlabel="Количество наблюдений",
    figsize=(7, 10),
)
```

##### `borocode`
Рассмотрим категориальный признак `borocode`, содержащий код района, в котором
расположено дерево:
- 1 - (Манхэттен),
- 2 - (Бронкс),
- 3 - (Бруклин),
- 4 - (Куинс),
- 5 - (Стейтен-Айленд).

```{python}
explore_cat_feature(
    data=dataset,
    column_name="borocode",
    title="Код района",
    xlabel="Количество наблюдений",
    ylabel="Код",
)
```

Признак является закодированным признаком `boroname`.

##### `cncldist`
Рассмотрим категориальный признак `cncldist`, содержащий муниципальный округ, в
котором находится дерево.

```{python}
explore_cat_feature(
    data=dataset,
    column_name="cncldist",
    title="Муниципальный округ",
    xlabel="Количество наблюдений",
    ylabel="Округ",
    figsize=(7, 10),
)
```

Большинство деревьев расположены в округе 51.

##### `st_senate`
Рассмотрим категориальный признак `st_senate`, содержащий район Сената штата, в
котором находится дерево. 

```{python}
explore_cat_feature(
    data=dataset,
    column_name="st_senate",
    title="Район Сената штата",
    xlabel="Количество наблюдений",
    ylabel="Район",
    figsize=(7, 10),
)
```

Большинство наблюдений соответствуют району Сената штата с номером 24.

##### `council_district`
Рассмотрим категориальный признак `council_district`, содержащий муниципальный
округ, в котором находится дерево. 

```{python}
explore_cat_feature(
    data=dataset,
    column_name="council_district",
    title="Муниципальный округ",
    xlabel="Количество наблюдений",
    ylabel="Муниципальный округ",
    figsize=(7, 10),
)
```

Большинство деревьев относится к муниципальному округу с номером 51.

Признак содержит небольшое количество пропусков, что может быть связано как
с ошибками в данных, так и с особенностями административно-территорального
деления в США.

##### `spc_latin`
Рассмотрим категориальный признак `spc_latin`, содержащий название вида дерева
на латыни. Признак обладает высокой кардинальностью, поэтому выведем 50 наиболее
часто встречающихся значений. 

```{python}
explore_cat_feature(
    data=dataset,
    column_name="spc_latin",
    n_top=50,
    title="Виды деревьев",
    xlabel="Количество наблюдений",
    ylabel="Латинское название вида",
    figsize=(7, 10),
)
```

Чаще всех встречаются деревья вида **Platanus x acerifolia**
(плантан кленолистный).

##### `spc_common`
Рассмотрим категориальный признак `spc_common`, содержащий обывательское 
название вида дерева. Признак обладает высокой кардинальностью, поэтому выведем
50 наиболее часто встречающихся значений. 

```{python}
explore_cat_feature(
    data=dataset,
    column_name="spc_common",
    n_top=50,
    title="Виды деревьев",
    xlabel="Количество наблюдений",
    ylabel="Обывательское название",
    figsize=(7, 10),
)
```

На первом месте всё также плантан кленолистный.

##### `problems`
Рассмотрим категориальный признак `problems`, содержащий информацию о проблемах
с деревом. Признак обладает высокой кардинальностью, поэтому выведем
50 наиболее часто встречающихся значений и, на всякий случай, подсчитаем
количество пропусков.

```{python}
print(
    "Количество пропусков в столбце в полных данных: "
    f"{dataset.problems.isna().sum()}\n"
)

explore_cat_feature(
    data=dataset,
    column_name="problems",
    n_top=50,
    title="Проблемы деревьев",
    xlabel="Количество наблюдений",
    ylabel="Проблема",
    figsize=(7, 10),
)
```

Признак содержит записи как об отдельных проблемах, так и об их комбинациях,
перечисленных через запятую. **Интересно, что признак также содержит пропуски.**

Чаще всего деревья либо не имеют никаких проблем, либо имеют проблемы с камнями
и осветительными приборами в ветвях. Закономерно, комбинации проблем встречаются
значительно реже.

Чтобы понять какие **отдельные проблемы** встречаются чаще всего исключим из
датасета деревья не имеющие проблем и записи, содержащие пропуски в данном
столбце, разделим все комбинации проблем на отдельные проблемы и сосчитаем как
часто они встречаются.

```{python}
trees_problems = (
    dataset.query("problems != 'None' and problems.notna()")
    .set_index(keys=["tree_id", "problems"], drop=False)
    .drop(columns="tree_id")
    .problems.str.split(",")
    .explode()
    .rename_axis(index={"problems": "problems_str"})
    .reset_index()
)

explore_cat_feature(
    data=trees_problems,
    column_name="problems",
    title="Частота отдельных проблем деревьев",
    xlabel="Количество наблюдений",
    ylabel="Проблема",
    figsize=(10, 5),
)
```

Подсчитаем количество отдельных проблем у одного дерева, для этого создадим
признак `problems_count` и выясним как часто встречается разное количество
проблем у одного дерева.

```{python}
explore_cat_feature(
    data=(
        trees_problems.assign(
            problems_count=lambda x: trees_problems.groupby(
                by=["tree_id", "problems_str"]
            ).problems.transform("count")
        )
    ),
    column_name="problems_count",
    title="Количество отдельных проблем у одного дерева",
    xlabel="Количество наблюдений",
    ylabel="Количество отдельных проблем",
    figsize=(10, 5),
)
```

Чаще всего одно дерево имеет 1 - 2 отдельные проблемы, при этом, максимальное
количество проблем равно 9.

Попробуем выяснить какие проблемы деревьев встречаются вместе.
Будем рассматривать отдельные пары проблем.

```{python}
explore_cat_vs_cat(
    data=(
        trees_problems.merge(
            pd.Series(
                trees_problems["problems"].unique(), name="base_problems"
            ),
            how="cross",
        )
        .rename(columns={"problems": "actual_problems"})
        .assign(
            presented=(
                lambda df: df.apply(
                    lambda row: (
                        row.base_problems in row.problems_str
                        and row.actual_problems in row.problems_str
                    ),
                    axis="columns",
                )
            )
        )
        .query("presented == True")
    ),
    x="base_problems",
    y="actual_problems",
    title="Совстречаемость проблем деревьев",
    xlabel="Проблема",
    ylabel="Проблема",
    figsize=(16, 16),
    norm=matplotlib.colors.LogNorm(),
    alpha=0.5,
)
```

Очевидно, разные пары проблем встречаются с разной частотой. Реже всех
встречаются проблемы с кросовками и осветительными приборами на стволе.
Чаще всех - проблемы только с камнями и проблемы только с осветительными
приборами в ветвях и комбинация этих проблем. Реже всех встречаются проблемы
с кросовками и комбинации этих проблем с другими. Примечательно, что
в комбинациях присутствует каждая пара проблем и нет взаимоисключающих
категорий.

### Исследование признаков в парах

#### Матрица корреляции для количественных признаков
К количественным признакам относятся следующие:
- `tree_dbh`;
- `stump_diam`;
- `latitude`;
- `longitude`;
- `x_sp`;
- `y_sp`;
- `bin`;
- `bbl`.

Построим для них матрицу корреляции. Так как количественные признаки содержат
выбросы, будем использовать коэффициент корреляции Кендалла.

```{python}
plot_corr_matrix(
    dataset[
        [
            "tree_dbh",
            "stump_diam",
            "latitude",
            "longitude",
            "x_sp",
            "y_sp",
            "bin",
            "bbl",
        ]
    ],
    method="kendall",
)
```

Пары признаков `latitude` и `y_sp`, `longitude` и `x_sp`, `bin` и `bbl`
показывают очень высокую корреляцию, скорее всего величины в этих парах связаны
некоторой зависимостью. Для пар `latitude` и `y_sp`, `longitude` и `x_sp` такая
высокая корреляция логична, так как это широта и долгота в разных системах
координат. Причина высокой корреляции между `bin` и `bbl` остаётся загадкой,
так как автору не известен физический смысл этих величин. Тем не менее
достаточно будет рассмотреть по одному признаку из каждой пары.

#### Пары категориальных признаков

##### `spc_latin` и `spc_common`
Проверим нет ли ошибок в сопоставлении обывательского названия вида дерева с его
названием на латыне. Для этого посчитаем какое максимальное количество названий
на латыне соответствует каждому обывательскому названию и наоборот.

```{python}
print(
    "Максимальное количество уникальных названий вида дерева",
    "на латыне для каждого обывательского названия:",
    dataset.groupby("spc_common").spc_latin.nunique().max(),
)

print(
    "Максимальное количество уникальных обывательских названий",
    "вида дерева для каждого названия на латыне:",
    dataset.groupby("spc_latin").spc_common.nunique().max(),
)
```

Таким образом, каждому уникальному названию дерева на латыне соответствует
только одно уникальное обывательское название. Скорее всего, названия видов
деревьев сопоставлены корректно, но не исключено, что для отдельных деревьев
некорректно указано как название вида на латыне так и соответствующее
обывательское название.

##### Совстречаемость проблем
Попробуем выяснить какие проблемы деревьев встречаются одновременно, для этого
построим график, называемый
[Parallel Categories Diagram](https://plotly.com/python/parallel-categories-diagram/),
из библиотеки `Plotly` для трёх наиболее часто встречающихся проблем, которым
соответствуют значения **Yes** в следующих признаках:

- `root_stone`,
- `brch_light`,
- `trnk_other`.

```{python}
cols = [
    "root_stone",
    "brch_light",
    "trnk_other",
]

fig = px.parallel_categories(
    data_frame=(
        dataset.loc[:, cols].assign(
            log10_count=np.log10(
                dataset.groupby(by=cols)["tree_id"].transform("count")
            )
        )
    ),
    dimensions=cols,
    color="log10_count",
    color_continuous_scale="greens_r",
    range_color=[3, 6],
)

fig.update_layout(
    title="Совстречаемость трёх наиболее распространённых проблем",
    title_x=0.5,
)

fig.show()
```

